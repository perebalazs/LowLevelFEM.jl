var documenterSearchIndex = {"docs":
[{"location":"Examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"Examples/#2D-Cantilever","page":"Examples","title":"2D Cantilever","text":"","category":"section"},{"location":"Examples/","page":"Examples","title":"Examples","text":"(Image: $\\sigma_x$ on deformed shape)","category":"page"},{"location":"Examples/","page":"Examples","title":"Examples","text":"(Image: $\\sigma_x$ and $\\tau_{yx}$ on path)","category":"page"},{"location":"Examples/","page":"Examples","title":"Examples","text":"cantilever2D.jl","category":"page"},{"location":"Examples/","page":"Examples","title":"Examples","text":"import LowLevelFEM as FEM\nusing LowLevelFEM\n\ngmsh.initialize()\n\ngmsh.open(\"cantilever2D.geo\")\nmat = FEM.material(\"body\", E=2.e5, ν=0.3)\nproblem = FEM.Problem([mat], type=\"PlaneStress\")\n\nsupp = FEM.displacementConstraint(\"supp\", ux=0, uy=0)\nload = FEM.load(\"load\", fy=-1)\n\nK = FEM.stiffnessMatrix(problem)\nf = FEM.loadVector(problem, [load])\n\nFEM.applyBoundaryConditions!(problem, K, f, [supp])\n\nq = FEM.solveDisplacement(K, f)\nS = FEM.solveStress(problem, q)\n\nu = FEM.showDoFResults(problem, q, \"uvec\", name=\"uvec\", visible=false)\nux = FEM.showDoFResults(problem, q, \"ux\", name=\"ux\", visible=false)\nuy = FEM.showDoFResults(problem, q, \"uy\", name=\"uy\", visible=false)\n\ns = FEM.showStressResults(problem, S, \"s\", name=\"σ\", visible=true, smooth=true)\nsx = FEM.showStressResults(problem, S, \"sx\", name=\"σx\", visible=false, smooth=true)\nsy = FEM.showStressResults(problem, S, \"sy\", name=\"σy\", visible=false, smooth=true)\nsxy = FEM.showStressResults(problem, S, \"sxy\", name=\"τxy\", visible=false, smooth=true)\n\nFEM.plotOnPath(problem, \"path\", sx, name=\"σx\", visible=false);\nFEM.plotOnPath(problem, \"path\", sxy, name=\"τxy\", visible=false);\nFEM.plotOnPath(problem, \"path\", ux, name=\"ux\", visible=false);\n\ngmsh.fltk.run()\ngmsh.finalize()","category":"page"},{"location":"Examples/","page":"Examples","title":"Examples","text":"cantilever2D.geo","category":"page"},{"location":"Examples/","page":"Examples","title":"Examples","text":"SetFactory(\"OpenCASCADE\");\n\nRectangle(1) = {0, 0, 0, 100, 10, 0};\n\nPhysical Curve(\"supp\", 5) = {4};\nPhysical Curve(\"load\", 6) = {2};\nPhysical Surface(\"body\", 7) = {1};\n\nRecombine Surface {1};\n\nTransfinite Line {2,4} = 4;\nTransfinite Line {1,3} = 31;\nTransfinite Surface {1};\n\nMesh.ElementOrder = 3;\n\nSetName \"cantilever2D\";\nMesh 2;\n\nPoint(5) = {10, 0, 0, 1.0};\nPoint(6) = {10, 10, 0, 1.0};\nLine(5) = {5, 6};\n\nPhysical Curve(\"path\", 8) = {5};","category":"page"},{"location":"Examples/#3D-Cantilever","page":"Examples","title":"3D Cantilever","text":"","category":"section"},{"location":"Examples/","page":"Examples","title":"Examples","text":"(Image: $\\sigma_x$ on deformed shape)","category":"page"},{"location":"Examples/","page":"Examples","title":"Examples","text":"cantilever3D.jl","category":"page"},{"location":"Examples/","page":"Examples","title":"Examples","text":"import LowLevelFEM as FEM\nusing LowLevelFEM\n\ngmsh.initialize()\n\ngmsh.open(\"cantilever3D.geo\")\nmat = FEM.material(\"body\", E=2.e5, ν=0.3)\nproblem = FEM.Problem([mat])\n\nsupp = FEM.displacementConstraint(\"supp\", ux=0, uy=0, uz=0)\nload = FEM.load(\"load\", fy=-1)\n\nK = FEM.stiffnessMatrix(problem)\nf = FEM.loadVector(problem, [load])\n\nFEM.applyBoundaryConditions!(problem, K, f, [supp])\n\nq = FEM.solveDisplacement(K, f)\nS = FEM.solveStress(problem, q)\n\nu = FEM.showDoFResults(problem, q, \"uvec\", name=\"uvec\", visible=false)\nux = FEM.showDoFResults(problem, q, \"ux\", name=\"ux\", visible=false)\nuy = FEM.showDoFResults(problem, q, \"uy\", name=\"uy\", visible=false)\nuz = FEM.showDoFResults(problem, q, \"uz\", name=\"uz\", visible=false)\n\ns = FEM.showStressResults(problem, S, \"s\", name=\"σ\", visible=true, smooth=true)\nsx = FEM.showStressResults(problem, S, \"sx\", name=\"σx\", visible=false, smooth=true)\nsy = FEM.showStressResults(problem, S, \"sy\", name=\"σy\", visible=false, smooth=true)\nsz = FEM.showStressResults(problem, S, \"sz\", name=\"σz\", visible=false, smooth=true)\nsxy = FEM.showStressResults(problem, S, \"sxy\", name=\"τxy\", visible=false, smooth=true)\nsyz = FEM.showStressResults(problem, S, \"syz\", name=\"τyz\", visible=false, smooth=true)\nszx = FEM.showStressResults(problem, S, \"szx\", name=\"τzx\", visible=false, smooth=true)\n\nFEM.plotOnPath(problem, \"path\", sx, name=\"σx\", visible=false);\nFEM.plotOnPath(problem, \"path\", sxy, name=\"τxy\", visible=false);\nFEM.plotOnPath(problem, \"path\", ux, name=\"ux\", visible=false);\n\ngmsh.fltk.run()\ngmsh.finalize()","category":"page"},{"location":"Examples/","page":"Examples","title":"Examples","text":"cantilever3D.geo","category":"page"},{"location":"Examples/","page":"Examples","title":"Examples","text":"SetFactory(\"OpenCASCADE\");\n\nBox(1) = {0, 0, 0, 100, 10, 10};\n\nPhysical Surface(\"supp\", 13) = {1};\nPhysical Surface(\"load\", 14) = {2};\nPhysical Volume(\"body\", 15) = {1};\n\nRecombine Surface {1:6};\n\nTransfinite Line {1:8} = 4;\nTransfinite Line {9:12} = 31;\nTransfinite Surface {1:6};\nTransfinite Volume {1};\n\nMesh.ElementOrder = 3;\n\nSetName \"cantilever3D\";\nMesh 3;\n\nPoint(9) = {10, 0, 5, 1.0};\nPoint(10) = {10, 10, 5, 1.0};\nLine(13) = {9, 10};\n\nPhysical Curve(\"path\", 16) = {13};","category":"page"},{"location":"Examples/#L-shaped-plate","page":"Examples","title":"L-shaped plate","text":"","category":"section"},{"location":"Examples/","page":"Examples","title":"Examples","text":"(Image: Mesh with a path for graphs)","category":"page"},{"location":"Examples/","page":"Examples","title":"Examples","text":"(Image: Fillet)","category":"page"},{"location":"Examples/","page":"Examples","title":"Examples","text":"(Image: Equivalent stress)","category":"page"},{"location":"Examples/","page":"Examples","title":"Examples","text":"(Image: Equivalent stress on path)","category":"page"},{"location":"Examples/","page":"Examples","title":"Examples","text":"LshapedPlate.jl","category":"page"},{"location":"Examples/","page":"Examples","title":"Examples","text":"import LowLevelFEM as FEM\nusing LowLevelFEM\n\ngmsh.initialize()\n\n#gmsh.open(\"LshapedPlate.geo\")\ngmsh.open(\"LshapedPlate2.geo\")\n\nmat = FEM.material(\"body\", E=2.e5, ν=0.3)\nproblem = FEM.Problem([mat], type=\"PlaneStress\", thickness=1)\n\nbc1 = FEM.displacementConstraint(\"fix\", ux=0, uy=0)\nld1 = FEM.load(\"load\", fy=-1)\n\nK = FEM.stiffnessMatrix(problem)\nf = FEM.loadVector(problem, [ld1])\nFEM.applyBoundaryConditions!(problem, K, f, [bc1])\n\nq = FEM.solveDisplacement(K, f)\nS = FEM.solveStress(problem, q)\n\nu = FEM.showDoFResults(problem, q, \"uvec\", name=\"uvec\", visible=false)\nux = FEM.showDoFResults(problem, q, \"ux\", name=\"ux\", visible=false)\nuy = FEM.showDoFResults(problem, q, \"uy\", name=\"uy\", visible=false)\nuz = FEM.showDoFResults(problem, q, \"uz\", name=\"uz\", visible=false)\ns = FEM.showStressResults(problem, S, \"s\", name=\"σ red\", visible=false, smooth=false)\nss = FEM.showStressResults(problem, S, \"s\", name=\"σ red smooth\", visible=true, smooth=true)\nsx = FEM.showStressResults(problem, S, \"sx\", name=\"σx\", visible=false, smooth=true)\nsy = FEM.showStressResults(problem, S, \"sy\", name=\"σy\", visible=false, smooth=true)\nsz = FEM.showStressResults(problem, S, \"sz\", name=\"σz\", visible=false, smooth=true)\nsxy = FEM.showStressResults(problem, S, \"sxy\", name=\"τxy\", visible=false, smooth=true)\nsyz = FEM.showStressResults(problem, S, \"syz\", name=\"τyz\", visible=false, smooth=true)\nszx = FEM.showStressResults(problem, S, \"szx\", name=\"τzx\", visible=false, smooth=true)\n\nFEM.plotOnPath(problem, \"path\", s, name=\"σred\", visible=false);\n\ngmsh.fltk.run()\ngmsh.finalize()","category":"page"},{"location":"Examples/","page":"Examples","title":"Examples","text":"LshapedPlate.geo","category":"page"},{"location":"Examples/","page":"Examples","title":"Examples","text":"Point(1) = {0, 0, 0, 15.0};\nPoint(2) = {100, 0, 0, 15.0};\nPoint(3) = {100, 50, 0, 15.0};\nPoint(4) = {50, 50, 0, 0.5};\nPoint(5) = {50, 100, 0, 15.0};\nPoint(6) = {0, 100, 0, 15.0};\nLine(1) = {1, 2};\nLine(2) = {2, 3};\nLine(3) = {3, 4};\nLine(4) = {4, 5};\nLine(5) = {5, 6};\nLine(6) = {6, 1};\nCurve Loop(1) = {6, 1, 2, 3, 4, 5};\nPlane Surface(1) = {1};\n\nPhysical Curve(\"fix\", 7) = {5};\nPhysical Curve(\"load\", 8) = {2};\nPhysical Surface(\"body\", 11) = {1};\n\nSetName \"Lshape\";\n\nMesh.ElementOrder = 4;\nMesh.HighOrderOptimize = 1;\nMesh 2;\n\nPoint(7) = {0, 0, 0, 1.0};\nPoint(8) = {50, 50, 0, 1.0};\nLine(7) = {7, 8};\n\nPhysical Curve(\"path\", 9) = {7};","category":"page"},{"location":"Examples/","page":"Examples","title":"Examples","text":"LshapedPlate2.geo","category":"page"},{"location":"Examples/","page":"Examples","title":"Examples","text":"R=1;\n\nPoint(1) = {0, 0, 0, 15.0};\nPoint(2) = {100, 0, 0, 15.0};\nPoint(3) = {100, 50, 0, 15.0};\nPoint(4) = {50+R, 50, 0, R/1.6};\nPoint(5) = {50, 50+R, 0, R/1.6};\nPoint(6) = {50, 100, 0, 15.0};\nPoint(7) = {0, 100, 0, 15.0};\nPoint(8) = {50+R, 50+R, 0, 0.0};\nLine(1) = {1, 2};\nLine(2) = {2, 3};\nLine(3) = {3, 4};\nCircle(4) = {4, 8, 5};\nLine(5) = {5, 6};\nLine(6) = {6, 7};\nLine(7) = {7, 1};\nCurve Loop(1) = {1, 2, 3, 4, 5, 6, 7};\nPlane Surface(1) = {1};\n\nPhysical Curve(\"fix\", 8) = {6};\nPhysical Curve(\"load\", 9) = {2};\nPhysical Surface(\"body\", 11) = {1};\n\nSetName \"Lshape\";\nMesh.ElementOrder = 4;\nMesh.HighOrderOptimize = 1;\nMesh 2;\n\nPoint(9) = {0, 0, 0, 1.0};\nPoint(10) = {50+0.415*R, 50+0.415*R, 0, 1.0};\nLine(8) = {9, 10};\n\nPhysical Curve(\"path\", 10) = {8};","category":"page"},{"location":"Examples/#Wave-propagation-in-a-plate","page":"Examples","title":"Wave propagation in a plate","text":"","category":"section"},{"location":"Examples/","page":"Examples","title":"Examples","text":"(Image: velocity field)","category":"page"},{"location":"Examples/","page":"Examples","title":"Examples","text":"wavePropagation.jl","category":"page"},{"location":"Examples/","page":"Examples","title":"Examples","text":"import LowLevelFEM as FEM\nusing LowLevelFEM\n\ngmsh.initialize()\n\nE = 2e5\nν = 0.3\nρ = 7.85e-9\nthick = 1\nheight = 10\nbase = 100\nelemSize = 2 #22\n\napproxOrder = 2\ninternalNodes = true\nquadElements = true\n\ngmsh.model.add(\"rectangle\")\n\np1 = gmsh.model.occ.addPoint(0, 0, 0)\np2 = gmsh.model.occ.addPoint(base, 0, 0)\np3 = gmsh.model.occ.addPoint(base, height, 0)\np4 = gmsh.model.occ.addPoint(0, height, 0)\n\nl1 = gmsh.model.occ.addLine(p1, p2)\nl2 = gmsh.model.occ.addLine(p2, p3)\nl3 = gmsh.model.occ.addLine(p3, p4)\nl4 = gmsh.model.occ.addLine(p4, p1)\n\ncl1 = gmsh.model.occ.addCurveLoop([l1, l2, l3, l4])\n\nl5 = gmsh.model.occ.addCircle(base / 2, height / 2, 0, min(base, height) / 4)\ncl2 = gmsh.model.occ.addCurveLoop([l5])\n\nsf1 = gmsh.model.occ.addPlaneSurface([cl1, cl2])\n\ngmsh.model.occ.synchronize()\n\nphg = gmsh.model.addPhysicalGroup(1, [l2])\ngmsh.model.setPhysicalName(1, phg, \"supp\")\nphg = gmsh.model.addPhysicalGroup(1, [l4])\ngmsh.model.setPhysicalName(1, phg, \"load\")\nphg = gmsh.model.addPhysicalGroup(2, [sf1])\ngmsh.model.setPhysicalName(2, phg, \"body\")\n\nFEM.generateMesh(sf1, elemSize, approxOrder=approxOrder, algorithm=6, quadrangle=quadElements, internalNodes=internalNodes)\n\nmat = FEM.material(\"body\", E=E, ν=ν)\nproblem = FEM.Problem([mat], type=\"PlaneStress\", thickness=thick)\n\nsupp = FEM.displacementConstraint(\"supp\", ux=0, uy=0)\nload = FEM.load(\"load\", fx=1, fy=0)\n\ngmsh.option.setNumber(\"Mesh.Lines\", 0)\n\nK = FEM.stiffnessMatrix(problem)\nf = FEM.loadVector(problem, [load])\nM = FEM.massMatrix(problem)\nC = 4e-3 * K\n\nFEM.applyBoundaryConditions!(problem, K, M, C, f, [supp]);\n\nTₘᵢₙ = FEM.smallestPeriodTime(K, M)\nq = FEM.solveDisplacement(K, f)\n\ndof, dof = size(K)\nu0 = zeros(dof)\nv0 = zeros(dof)\nFEM.initialDisplacement!(problem, \"supp\", u0, ux=0)\nFEM.initialVelocity!(problem, \"body\", v0, vx=1000)\nFEM.initialVelocity!(problem, \"supp\", v0, vx=0)\nf = zeros(dof)\n\nE = problem.material[1][2]\nρ = problem.material[1][4]\nc = √(E / ρ)\nξₘₐₓ = 1e-1\nβ = ξₘₐₓ * Tₘᵢₙ / π\nC = β * K\nu, v, t = FEM.CDM(K, M, C, f, u0, v0, base / c * 2, Tₘᵢₙ / π * (√(1 + ξₘₐₓ^2) - ξₘₐₓ) * 1.0)\n\nS = FEM.solveStress(problem, q)\n\nuvec = FEM.showDoFResults(problem, q, \"uvec\", name=\"uvec\", visible=false)\nux = FEM.showDoFResults(problem, q, \"ux\", name=\"ux\", visible=false)\nuy = FEM.showDoFResults(problem, q, \"uy\", name=\"uy\", visible=false)\nuz = FEM.showDoFResults(problem, q, \"uz\", name=\"uz\", visible=false)\ns = FEM.showStressResults(problem, S, \"s\", name=\"σ\", visible=false, smooth=true)\nsx = FEM.showStressResults(problem, S, \"sx\", name=\"σx\", visible=false, smooth=true)\nsy = FEM.showStressResults(problem, S, \"sy\", name=\"σy\", visible=false, smooth=true)\nsz = FEM.showStressResults(problem, S, \"sz\", name=\"σz\", visible=false, smooth=true)\nsxy = FEM.showStressResults(problem, S, \"sxy\", name=\"τxy\", visible=false, smooth=true)\nsyz = FEM.showStressResults(problem, S, \"syz\", name=\"τyz\", visible=false, smooth=true)\nszx = FEM.showStressResults(problem, S, \"szx\", name=\"τzx\", visible=false, smooth=true)\nvvec = FEM.showDoFResults(problem, v, t=t, \"uvec\", name=\"v(t)\", visible=true)\ngmsh.view.option.setNumber(vvec, \"NormalRaise\", 0.03)\n\nsts = ceil(Int64, (base / c * 2) / 6 / (Tₘᵢₙ / π * (√(1 + ξₘₐₓ^2) - ξₘₐₓ)))\ndisplay(sts)\nSp = FEM.solveStress(problem, u[:, sts])\nsp = FEM.showStressResults(problem, Sp, \"s\", name=\"σ at t\", visible=false, smooth=false);\n\nSanim = FEM.solveStress(problem, u[:, 1:sts])\nsanim = FEM.showStressResults(problem, Sanim, \"s\", t=t[1:sts], name=\"σ anim\", visible=false, smooth=false);\n\ngmsh.fltk.run()\ngmsh.finalize()","category":"page"},{"location":"Examples/","page":"Examples","title":"Examples","text":"For more examples see examples on GitHub","category":"page"},{"location":"Examples/","page":"Examples","title":"Examples","text":"","category":"page"},{"location":"Functions/#LowLevelFEM.jl","page":"Functions","title":"LowLevelFEM.jl","text":"","category":"section"},{"location":"Functions/","page":"Functions","title":"Functions","text":"Documentation for LowLevelFEM.jl","category":"page"},{"location":"Functions/#Functions","page":"Functions","title":"Functions","text":"","category":"section"},{"location":"Functions/","page":"Functions","title":"Functions","text":"Modules = [LowLevelFEM]","category":"page"},{"location":"Functions/#LowLevelFEM.CoordinateSystem","page":"Functions","title":"LowLevelFEM.CoordinateSystem","text":"CoordinateSystem(vec1, vec2)\n\nA structure containing the data of a coordinate system.\n\nvec1: direction of the new x axis.\nvec2: together with vec1 determine the xy plane\n\nIf the problem is two dimensional, it is enough to give the first two elements of vec1. Elements of vec1 and vec2 can be functions. In 3D case the functions have three arguments (x, y, and z coordinates), otherwise (in 2D case) the number of arguments is two (x and y coordinates).\n\nTypes:\n\nvec1: Vector{Float64}\nvec2: Vector{Float64}\n\n\n\n\n\n","category":"type"},{"location":"Functions/#LowLevelFEM.Eigen","page":"Functions","title":"LowLevelFEM.Eigen","text":"Eigen(f, ϕ)\n\nA structure containing the eigenfrequencies and eigen modes.\n\nf: eigenfrequencies\nϕ: eigen modes\n\nTypes:\n\nf: Matrix{Float64}\nϕ: Vector{Float64}\n\n\n\n\n\n","category":"type"},{"location":"Functions/#LowLevelFEM.Material","page":"Functions","title":"LowLevelFEM.Material","text":"Material(phName, E, ν, ρ, k, c, α)\n\nA structure containing the material constants. \n\nE: elastic modulus,\nν: Poisson's ratio,\nρ: mass density,\nk: heat conductivity,\nc: specific heat,\nα: heat expansion coefficient\n\nphName is the name of the physical group where the given material is used.\n\nTypes:\n\nphName: String\nE: Float64\nν: Float64\nρ: Float64\nk: Float64\nc: Float64\nα: Float64\n\n\n\n\n\n","category":"type"},{"location":"Functions/#LowLevelFEM.Problem","page":"Functions","title":"LowLevelFEM.Problem","text":"Problem(materials; thickness=..., type=..., bandwidth=...)\n\nA structure containing the most important data of the problem. \n\nParts of the model with their material constants. More materials can be given. (see material function)\ntype of the problem: 3D :Solid, :PlaneStrain, :PlaneStress, :AxiSymmetric, :PlaneHeatConduction, :HeatConduction, :AxiSymmetricHeatConduction. In the case of :AxiSymmetric, the axis of symmetry is the \"y\" axis,  while the geometry must be drawn in the positive \"x\" half-plane.\nbandwidth optimization using built-in gmsh function. Possibilities: :RCMK, :Hilbert, :Metis or :none (default)\ndimension of the problem, determined from type\nmaterial constants: Young's modulus, Poisson's ratio, mass density, heat conduction corfficient, specific heat, heat  expansion coefficient (in a vector of material structure materials)\nthickness of the plate\nnumber of nodes (non)\n\nTypes:\n\nmaterials: Material\ntype: Symbol\nbandwidth: String\ndim: Integer\nthickness: Float64\nnon: Integer\n\n\n\n\n\n","category":"type"},{"location":"Functions/#LowLevelFEM.TensorField","page":"Functions","title":"LowLevelFEM.TensorField","text":"TensorField(sigma, numElem, nsteps)\n\nA structure containing the data of a stress or strain field. \n\nsigma: vector of ElementNodeData type stress data (see gmsh.jl)\nnumElem: vector of tags of elements\nnsteps: number of stress fields stored in sigma (for animations).\ntype: type of data (eg. stress :s and strain :e)\n\nTypes:\n\nsigma: Vector{Matrix{Float64}}\nnumElem: Vector{Integer}\nnsteps: Integer\ntype: Symbol\n\n\n\n\n\n","category":"type"},{"location":"Functions/#LowLevelFEM.VectorField","page":"Functions","title":"LowLevelFEM.VectorField","text":"VectorField(sigma, numElem, nsteps)\n\nA structure containing the data of a heat flux field. \n\nsigma: vector of ElementNodeData type heat flux data (see gmsh.jl)\nnumElem: vector of tags of elements\nnsteps: number of stress fields stored in sigma (for animations).\ntype: type of data (eg. heat flux :q)\n\nTypes:\n\nsigma: Vector{Matrix{Float64}}\nnumElem: Vector{Integer}\nnsteps: Integer\ntype: Symbol\n\n\n\n\n\n","category":"type"},{"location":"Functions/#LowLevelFEM.CDM-NTuple{8, Any}","page":"Functions","title":"LowLevelFEM.CDM","text":"FEM.CDM(K, M, C, f, u0, v0, T, Δt)\n\nSolves a transient dynamic problem using central difference method (CDM) (explicit). K is the stiffness Matrix, M is the mass matrix, C is the damping matrix, f is the load vector, u0 is the initial displacement, v0 is the initial velocity, T is the upper bound of the time intervall (lower bound is zero) and Δt is the time step size. Returns the displacement vectors and velocity vectors in each time step arranged in the columns of the two matrices u and v and a vector t of the time instants used.\n\nThe critical (largest allowed) time step is Δtₘₐₓ = Tₘᵢₙ / π * (√(1 + ξₘₐₓ^2) - ξₘₐₓ) where Tₘᵢₙ is the time period of the largest eigenfrequency and ξₘₐₓ is the largest modal damping.\n\nReturn: u, v, t\n\nTypes:\n\nK: SparseMatrix\nM: SparseMatrix\nC: SparseMatrix\nf: Vector{Float64}\nu0: Vector{Float64}\nv0: Vector{Float64}\nT: Float64\nΔt: Float64 \nu: Matrix{Float64}\nv: Matrix{Float64}\nt: Vector{Float64}\n\n\n\n\n\n","category":"method"},{"location":"Functions/#LowLevelFEM.CDMaccuracyAnalysis-NTuple{4, Any}","page":"Functions","title":"LowLevelFEM.CDMaccuracyAnalysis","text":"FEM.CDMaccuracyAnalysis(ωₘᵢₙ, ωₘₐₓ, Δt, type; n=100, α=..., ξ=..., β=..., show_β=..., show_ξ=...)\n\nGives some functions (graphs) for accuracy analysis of the CDM method.  ωₘᵢₙ and ωₘₐₓ are the square root of smallest and largest eigenvalues of the Kϕ=ω²Mϕ eigenvalue problem, Δt is the time step size. type is one of the following values:\n\n:SR: spectral radius\n:PDR: physical damping ratio\n:ADR: algorithmic damping ratio\n:PE: period error\n\nFor details see [3].  n is the number of points in the graph. The damping matrix is assembled in the  following ways: C=αM+βK or C=αM+β₁K+β₂KM⁻¹K+β₃KM⁻¹KM⁻¹K+⋅⋅⋅.  The latter corresponds to the damping characteristic characterized by a power series consisting of powers of the natural frequencies with odd exponents. ξᵢ (ξ in the argument list) are the values ​​of the  individual members of the series corresponding to the ωₘₐₓ value. βᵢ (β in the argument list) are the  coefficients of the series. (see [4]) Either ξ or β must be specified. ξ or β are scalars or  vectors. If show_β or show_ξ is true, the corresponding β or ξ values will be  sent to the output. Returns a tuple of x and y values of the graph. (Can be plotted with plot(xy))\n\n[4]: Serfőző, D., Pere, B.: An effective reduction method with Caughey damping for  spurious oscillations in dynamic problems, preprint, https://doi.org/10.21203/rs.3.rs-3930320/v1\n\nReturn: xy\n\nTypes:\n\nK: SparseMatrix\nM: SparseMatrix\nωₘᵢₙ: Float64\nωₘₐₓ: Float64\nΔt: Float64 \nn: Int64\nα: Float64\nβ: Float64 of Vector{Float64}\nξ: Float64 of Vector{Float64}\nshow_β: Boolean\nshow_ξ: Boolean\nxy: Tuple{Vector{Float64},Vector{Float64}}\n\n\n\n\n\n","category":"method"},{"location":"Functions/#LowLevelFEM.FDM-NTuple{6, Any}","page":"Functions","title":"LowLevelFEM.FDM","text":"FEM.FDM(K, C, q, T0, tₘₐₓ, Δt; ϑ=...)\n\nSolves a transient heat conduction problem using Finite Difference Method (FDM). Introducing a ϑ parameter, special cases can be used as the Forward Euler (explicit, ϑ=0), Backward Euler (implicit, ϑ=1), Crank-Nicolson (ϑ=0.5) and intermediate cases (0<ϑ<1). (This method is known as ϑ-method. See [5].) K is the heat conduction matrix, C is the heat capacity matrix, q is the heat flux vector, T0 is the initial temperature, tₘₐₓ is the upper  bound of the time intervall (lower bound is zero) and Δt is the time step size. Returns the nodal temperature vectors in each time  step arranged in the columns of the matrix T and a vector t of the time instants used.\n\nThe critical (largest allowed) time step is Δtₘₐₓ = 2 / ((1-2ϑ)*λₘₐₓ) where λₘₐₓ is the largest eigenvalue of (K+λC)θ=0  eigenvalue problem and ϑ is the parameter of the ϑ-method. Default value of ϑ is 1/2.\n\n[5]: Bathe, K. J.: Finite element procedures, Wiley, 1983, https://doi.org/10.1002/nag.1610070412\n\nReturn: T, t\n\nTypes:\n\nK: SparseMatrix\nC: SparseMatrix\nq: Vector{Float64}\nT0: Vector{Float64}\ntₘₐₓ: Float64\nΔt: Float64 \nT: Matrix{Float64}\nt: Vector{Float64}\n\n\n\n\n\n","category":"method"},{"location":"Functions/#LowLevelFEM.HHT-NTuple{7, Any}","page":"Functions","title":"LowLevelFEM.HHT","text":"FEM.HHT(K, M, f, u0, v0, T, Δt; α=..., δ=..., γ=..., β=...)\n\nSolves a transient dynamic problem using HHT-α method[1] (implicit). K is the stiffness Matrix, M is the mass matrix, f is the load vector,  u0 is the initial displacement, v0 is the initial velocity, T is the  upper bound of the time intervall (lower bound is zero) and Δt is the time  step size. Returns the displacement vectors and velocity vectors in each time  step arranged in the columns of the two matrices u and v and a vector t  of the time instants used. For the meaning of α, β and γ see [1]. If δ is given, γ=0.5+δ and β=0.25⋅(0.5+γ)².\n\n[1]: Hilber, Hans M., Thomas JR Hughes, and Robert L. Taylor. \"Improved  numerical dissipation for time integration algorithms in structural  dynamics.\" Earthquake Engineering & Structural Dynamics 5.3 (1977): 283-292.\n\nReturn: u, v, t\n\nTypes:\n\nK: SparseMatrix\nM: SparseMatrix\nf: Vector{Float64}\nu0: Vector{Float64}\nv0: Vector{Float64}\nT: Float64\nΔt: Float64 \nα: Float64\nβ: Float64\nγ: Float64\nδ: Float64\nu: Matrix{Float64}\nv: Matrix{Float64}\nt: Vector{Float64}\n\n\n\n\n\n","category":"method"},{"location":"Functions/#LowLevelFEM.HHTaccuracyAnalysis-NTuple{4, Any}","page":"Functions","title":"LowLevelFEM.HHTaccuracyAnalysis","text":"FEM.HHTaccuracyAnalysis(ωₘᵢₙ, ωₘₐₓ, Δt, type; n=100, α=0.0, δ=0.0, γ=0.5 + δ, β=0.25 * (0.5 + γ)^2)\n\nGives some functions (graphs) for accuracy analysis of the HHT-α method[1].  ωₘᵢₙ and ωₘₐₓ are the square root of smallest and largest eigenvalues of the Kϕ=ω²Mϕ eigenvalue problem, Δt is the time step size. type is one of the following values:\n\n:SR: spectral radius\n:ADR: algorithmic damping ratio\n:PE: period error\n\nFor details see [2] and [3].  n is the number of points in the graph. For the meaning of α, β and γ see [1]. If δ is given, γ=0.5+δ and β=0.25⋅(0.5+γ)². Returns a tuple of x and y values of the graph. (Can be plotted with plot(xy))\n\n[2]: Belytschko, Ted, and Thomas JR, Hughes: \"Computational methods for  transient analysis\", North-Holland, (1983).\n\n[3]: Serfőző, D., Pere, B.: A method to accurately define arbitrary algorithmic damping character as viscous damping. Arch Appl Mech 93, 3581–3595 (2023). https://doi.org/10.1007/s00419-023-02454-9\n\nReturn: xy\n\nTypes:\n\nωₘᵢₙ: Float64\nωₘₐₓ: Float64\nΔt: Float64 \nn: Int64\nα: Float64\nβ: Float64\nγ: Float64\nδ: Float64\nxy: Tuple{Vector{Float64},Vector{Float64}}\n\n\n\n\n\n","category":"method"},{"location":"Functions/#LowLevelFEM.applyBoundaryConditions!-NTuple{4, Any}","page":"Functions","title":"LowLevelFEM.applyBoundaryConditions!","text":"FEM.applyBoundaryConditions!(problem, stiffMat, loadVec, supports)\n\nApplies displacement boundary conditions supports on a stiffness matrix stiffMat and load vector loadVec. Mesh details are in problem. supports is a tuple of name of physical group and prescribed displacements ux, uy and uz.\n\nReturn: none\n\nTypes:\n\nproblem: Problem\nstiffMat: SparseMatrix \nloadVec: Vector \nsupports: Vector{Tuple{String, Float64, Float64, Float64}}\n\n\n\n\n\n","category":"method"},{"location":"Functions/#LowLevelFEM.applyBoundaryConditions!-NTuple{5, Any}","page":"Functions","title":"LowLevelFEM.applyBoundaryConditions!","text":"FEM.applyBoundaryConditions!(problem, heatCondMat, heatCapMat, heatFluxVec, supports)\n\nApplies boundary conditions supports on a heat conduction matrix heatCondMat, heat capacity matrix heatCapMat and heat flux vector heatFluxVec. Mesh details are in problem. supports is a tuple of name of physical group and prescribed temperature T.\n\nReturn: stiffMat, loadVec\n\nTypes:\n\nproblem: Problem\nstiffMat: SparseMatrix \nloadVec: Vector \nsupports: Vector{Tuple{String, Float64, Float64, Float64}}\n\n\n\n\n\n","category":"method"},{"location":"Functions/#LowLevelFEM.applyBoundaryConditions!-NTuple{6, Any}","page":"Functions","title":"LowLevelFEM.applyBoundaryConditions!","text":"FEM.applyBoundaryConditions!(problem, stiffMat, massMat, dampMat, loadVec, supports)\n\nApplies displacement boundary conditions supports on a stiffness matrix stiffMat, mass matrix massMat, damping matrix dampMat and load vector loadVec. Mesh details are in problem. supports is a tuple of name of physical group and prescribed displacements ux, uy and uz.\n\nReturn: none\n\nTypes:\n\nproblem: Problem\nstiffMat: SparseMatrix \nmassMat: SparseMatrix \ndampMat: SparseMatrix \nloadVec: Vector{Float64}\nsupports: Vector{Tuple{String, Float64, Float64, Float64}}\n\n\n\n\n\n","category":"method"},{"location":"Functions/#LowLevelFEM.applyBoundaryConditions-NTuple{4, Any}","page":"Functions","title":"LowLevelFEM.applyBoundaryConditions","text":"FEM.applyBoundaryConditions(problem, stiffMat, loadVec, supports)\n\nApplies displacement boundary conditions supports on a stiffness matrix stiffMat and load vector loadVec. Mesh details are in problem. supports is a tuple of name of physical group and prescribed displacements ux, uy and uz. Creates a new stiffness matrix and load vector.\n\nReturn: stiffMat, loadVec\n\nTypes:\n\nproblem: Problem\nstiffMat: SparseMatrix \nloadVec: Vector \nsupports: Vector{Tuple{String, Float64, Float64, Float64}}\n\n\n\n\n\n","category":"method"},{"location":"Functions/#LowLevelFEM.applyElasticSupport!-Tuple{Any, Any, Any}","page":"Functions","title":"LowLevelFEM.applyElasticSupport!","text":"FEM.applyElasticSupport!(problem, stiffMat, elastSupp)\n\nApplies elastic support boundary conditions elastSupp on a stiffness matrix stiffMat. Mesh details are in problem. elastSupp is a tuple of name of physical group and prescribed kx, ky and kz stiffnesses.\n\nReturn: none\n\nTypes:\n\nproblem: Problem\nstiffMat: SparseMatrix \nelastSupp: Vector{Tuple{String, Float64, Float64, Float64}}\n\n\n\n\n\n","category":"method"},{"location":"Functions/#LowLevelFEM.applyHeatConvection!-NTuple{4, Any}","page":"Functions","title":"LowLevelFEM.applyHeatConvection!","text":"FEM.applyHeatConvection!(problem, heatCondMat, heatFluxVec, heatConv)\n\nApplies heat convectiom boundary conditions heatConv on a heat conduction matrix heatCondMat and heat flux vector heatFluxVec. Mesh details are in problem. heatConv is a tuple of name of physical group and prescribed heat transfer coefficient h and ambient temperature Tₐ. The ambient temperature can be either a constant or a  function of x, y and z coordinates.\n\nReturn: none\n\nTypes:\n\nproblem: Problem\nheatCondMat: SparseMatrix \nheatFluxVec: Vector \nheatConv: Vector{Tuple{String, Float64, Float64, Float64}}\n\n\n\n\n\n","category":"method"},{"location":"Functions/#LowLevelFEM.dampingMatrix-Tuple{Any, Any, Any}","page":"Functions","title":"LowLevelFEM.dampingMatrix","text":"FEM.dampingMatrix(K, M, ωₘₐₓ; α=0.0, ξ=..., β=...)\n\nGenerates the damping matrix for proportional damping case. C=αM+βK or C=αM+β₁K+β₂KM⁻¹K+β₃KM⁻¹KM⁻¹K+⋅⋅⋅. The latter corresponds  to the damping characteristic characterized by a power series consisting of powers of the natural frequencies with odd exponents. ξᵢ (ξ in the argument list) are the values ​​of the  individual members of the series corresponding to the ωₘₐₓ value. βᵢ (β in the argument list) are the  coefficients of the series. (see [4]) Either ξ or β must be specified. ξ or β are scalars or  vectors. K is the stiffness matrix, M is the mass matrix and ωₘₐₓ is the  largest natural frequency.\n\nReturn: dampingMatrix\n\nTypes:\n\nK: SparseMatrix\nM: SparseMatrix\nωₘₐₓ: Float64\nα: Float64\nξ: Float64 of Vector{Float64}\nβ: Float64 of Vector{Float64}\ndampingMatrix: SparseMatrix\n\n\n\n\n\n","category":"method"},{"location":"Functions/#LowLevelFEM.displacementConstraint-Tuple{Any}","page":"Functions","title":"LowLevelFEM.displacementConstraint","text":"FEM.displacementConstraint(name; ux=..., uy=..., uz=...)\n\nGives the displacement constraints on name physical group. At least one ux,  uy or uz value have to be given (depending on the dimension of the problem). ux, uy or uz can be a constant value, or a function of x, y and z. (E.g. fn(x,y,z)=5*(5-x)); FEM.displacementConstraint(\"support1\", ux=fn))\n\nReturn: Tuple{String, Float64 or Function, Float64 or Function, Float64 or Function}\n\nTypes:\n\nname: String\nux: Float64 or Function\nuy: Float64 or Function\nuz: Float64 or Function\n\n\n\n\n\n","category":"method"},{"location":"Functions/#LowLevelFEM.elasticSupport-Tuple{Any}","page":"Functions","title":"LowLevelFEM.elasticSupport","text":"FEM.elasticSupport(name; kx=..., ky=..., kz=...)\n\nGives the distributed stiffness of the elastic support on name physical group. kx, ky or kz can be a constant value, or a function of x, y and z. (E.g. fn(x,y,z)=5*(5-x)); FEM.elasticSupport(\"supp1\", kx=fn)) Default values are 1.\n\nReturn: Tuple{String, Float64 or Function, Float64 or Function, Float64 or Function}\n\nTypes:\n\nname: String\nkx: Float64 or Function\nky: Float64 or Function\nkz: Float64 or Function\n\n\n\n\n\n","category":"method"},{"location":"Functions/#LowLevelFEM.elasticSupportMatrix-Tuple{Any, Any}","page":"Functions","title":"LowLevelFEM.elasticSupportMatrix","text":"FEM.elasticSupportMatrix(problem, elSupp)\n\nSolves the elastic support matrix of the problem. elSupp is a vector of elastic supports defined in function FEM.elasticSupport. With the displacementent vector q in hand the reaction force vector fR arising from the elastic support can be solved. (fR = heatConvMat * q)\n\nReturn: elSuppMat\n\nTypes:\n\nproblem: Problem\nelSupp: Vector{Tuple{String, Float64, Float64, Float64}}\nelSuppMat: SparseMatrix\n\n\n\n\n\n","category":"method"},{"location":"Functions/#LowLevelFEM.generateMesh-Tuple{Any, Any}","page":"Functions","title":"LowLevelFEM.generateMesh","text":"FEM.generateMesh(problem, surf, elemSize; approxOrder=1, algorithm=6, quadrangle=0, internalNodes=0)\n\nObsolate, use gmsh script (.geo) instead.\n\nReturn: none\n\nTypes:\n\n``: x\n\n\n\n\n\n","category":"method"},{"location":"Functions/#LowLevelFEM.getTagForPhysicalName-Tuple{Any}","page":"Functions","title":"LowLevelFEM.getTagForPhysicalName","text":"FEM.getTagForPhysicalName(name)\n\nReturns tags of elements of physical group name.\n\nReturn: tags\n\nTypes:\n\nname: String\ntags: Vector{Integer}\n\n\n\n\n\n","category":"method"},{"location":"Functions/#LowLevelFEM.heatCapacityMatrix-Tuple{Any}","page":"Functions","title":"LowLevelFEM.heatCapacityMatrix","text":"FEM.heatCapacityMatrix(problem; lumped=...)\n\nSolves the heat capacity matrix of the problem. If lumped is true, solves lumped heat capacity matrix.\n\nReturn: heatCapMat\n\nTypes:\n\nproblem: Problem\nlumped: Boolean\nmassMat: SparseMatrix\n\n\n\n\n\n","category":"method"},{"location":"Functions/#LowLevelFEM.heatConductionMatrix-Tuple{Any}","page":"Functions","title":"LowLevelFEM.heatConductionMatrix","text":"FEM.heatConductionMatrix(problem)\n\nSolves the heat conduction matrix of the problem.\n\nReturn: heatCondMat\n\nTypes:\n\nproblem: Problem\nheatCondMat: SparseMatrix\n\n\n\n\n\n","category":"method"},{"location":"Functions/#LowLevelFEM.heatConvection-Tuple{Any}","page":"Functions","title":"LowLevelFEM.heatConvection","text":"FEM.heatConvection(name; h=..., Tₐ=...)\n\nGives the heat convection of the surface given with name physical group. h is the heat transfer coefficient of the surrounding media, Tₐ is the ambient temperature. The ambient temperature can be either a constant or a function of x, y and z.\n\nReturn: Tuple{String, Float64 or Function, Float64 or Function, Float64 or Function}\n\nTypes:\n\nname: String\nh: Float64\nTₐ: Float64 or Function\n\n\n\n\n\n","category":"method"},{"location":"Functions/#LowLevelFEM.heatConvectionMatrix-Tuple{Any, Any}","page":"Functions","title":"LowLevelFEM.heatConvectionMatrix","text":"FEM.heatConvectionMatrix(problem, heatConvection)\n\nSolves the heat convection matrix of the problem. heatConvection  is a vector of heat convection boundary condicions defined in function FEM.heatConduction. With the heat convection vector (see the heatConvectionVector function) heatConvVec, temperature field vector T in hand the heat flux vector qCV arising from the heat convection boundary condition can be solved. qCV = heatConvMat * T - heatConvVec\n\nReturn: heatConvMat\n\nTypes:\n\nproblem: Problem\nheatConvection: Vector{Tuple{String, Float64, Float64, Float64}}\nheatConvMat: SparseMatrix\n\n\n\n\n\n","category":"method"},{"location":"Functions/#LowLevelFEM.heatConvectionVector-Tuple{Any, Any}","page":"Functions","title":"LowLevelFEM.heatConvectionVector","text":"FEM.heatConvectionVector(problem, heatConvection)\n\nSolves a heat convection vector of problem. heatConvection  is a vector of heat convection boundary condicions defined in function FEM.heatConduction. With the heat convection matrix (see the heatConvectionMatrix function) heatConvMat, temperature field vector T in hand the heat flux vector qCV arising from the heat convection boundary condition can be solved. qCV = heatConvMat * T - heatConvVec\n\nReturn: heatConvVec\n\nTypes:\n\nproblem: Problem\nheatConvection: Vector{Tuple{String, Float64, Float64, Float64}}\nheatConvVec: Vector\n\n\n\n\n\n","category":"method"},{"location":"Functions/#LowLevelFEM.heatFlux-Tuple{Any}","page":"Functions","title":"LowLevelFEM.heatFlux","text":"FEM.heatFlux(name; qn=...)\n\nGives the heat flux normal to the surface of name physical group. qn can be a constant value, or a function of x, y and z. (E.g. fn(x,y,z)=5*(5-x)); FEM.load(\"flux1\", qn=fn))\n\nReturn: Tuple{String, Float64 or Function, Float64 or Function, Float64 or Function}\n\nTypes:\n\nname: String\nqn: Float64 or Function\n\n\n\n\n\n","category":"method"},{"location":"Functions/#LowLevelFEM.heatFluxVector-Tuple{Any, Any}","page":"Functions","title":"LowLevelFEM.heatFluxVector","text":"FEM.heatFluxVector(problem, heatFlux)\n\nSolves a heat flux or heat source vector of problem. heatFlux is a tuple of name of physical group  name, heat flux qn normal to the surface of the body. The outward direction is positive. It can solve heat flux (or heat source) depending on the problem.\n\nIn case of 2D problems and Point physical group means concentrated heat flux.\nIn case of 2D problems and Line physical group means surface heat flux.\nIn case of 2D problems and Surface physical group means body heat source.\nIn case of 3D problems and Point physical group means concentrated heat flux.\nIn case of 3D problems and Line physical group means edge heat source.\nIn case of 3D problems and Surface physical group means surface heat flux.\nIn case of 3D problems and Volume physical group means body heat source.\n\nReturn: heatFluxVec\n\nTypes:\n\nproblem: Problem\nheatFlux: Vector{Tuple{String, Float64, Float64, Float64}}\nheatFluxVec: Vector\n\n\n\n\n\n","category":"method"},{"location":"Functions/#LowLevelFEM.heatSource-Tuple{Any}","page":"Functions","title":"LowLevelFEM.heatSource","text":"FEM.heatSource(name; h=...)\n\nGives the body heat source in name physical group. h can be a constant value, or a function of x, y and z. (E.g. fn(x,y,z)=5*(5-x)); FEM.load(\"source1\", h=fn))\n\nReturn: Tuple{String, Float64 or Function, Float64 or Function, Float64 or Function}\n\nTypes:\n\nname: String\nh: Float64 or Function\n\n\n\n\n\n","category":"method"},{"location":"Functions/#LowLevelFEM.heatSourceVector-Tuple{Any, Any}","page":"Functions","title":"LowLevelFEM.heatSourceVector","text":"FEM.heatSourceVector(problem, heatSource)\n\nSolves a heat flux or heat source vector of problem. heatSource is a tuple of name of physical group  name, heat flux qn normal to the surface of the body. The outward direction is positive. It can solve heat flux (or heat source) depending on the problem.\n\nIn case of 2D problems and Point physical group means concentrated heat flux.\nIn case of 2D problems and Line physical group means surface heat flux.\nIn case of 2D problems and Surface physical group means body heat source.\nIn case of 3D problems and Point physical group means concentrated heat flux.\nIn case of 3D problems and Line physical group means edge heat source.\nIn case of 3D problems and Surface physical group means surface heat flux.\nIn case of 3D problems and Volume physical group means body heat source.\n\nSame as the heatFluxVector function.\n\nReturn: heatSourceVec\n\nTypes:\n\nproblem: Problem\nheatSource: Vector{Tuple{String, Float64, Float64, Float64}}\nheatSourceVec: Vector\n\n\n\n\n\n","category":"method"},{"location":"Functions/#LowLevelFEM.initialDisplacement!-Tuple{Any, Any, Any}","page":"Functions","title":"LowLevelFEM.initialDisplacement!","text":"FEM.initialDisplacement!(problem, name, u0; ux=..., uy=..., uz=...)\n\nChanges the displacement values to ux, uy and uz (depending on the dimension of the problem) at nodes belonging to physical group name. Original values are in displacement vector u0.\n\nReturn: u0\n\nTypes:\n\nproblem: Problem\nname: String \nux: Float64 \nuy: Float64 \nuz: Float64 \nu0: Vector{Float64}\n\n\n\n\n\n","category":"method"},{"location":"Functions/#LowLevelFEM.initialDisplacement-Tuple{Any, Any}","page":"Functions","title":"LowLevelFEM.initialDisplacement","text":"FEM.initialDisplacement(problem, name; ux=..., uy=..., uz=...)\n\nSets the displacement values ux, uy and uz (depending on the dimension of the problem) at nodes belonging to physical group name. Returns the initial displacement vector u0.\n\nReturn: u0\n\nTypes:\n\nproblem: Problem\nname: String \nu0: Vector{Float64}\nux: Float64 \nuy: Float64 \nuz: Float64 \n\n\n\n\n\n","category":"method"},{"location":"Functions/#LowLevelFEM.initialTemperature!-Tuple{Any, Any, Any}","page":"Functions","title":"LowLevelFEM.initialTemperature!","text":"FEM.initialTemperature!(problem, name, T0; T=...)\n\nChanges the tempetature value to T at nodes belonging to physical group name. Original values are in temperature vector T0.\n\nReturn: none\n\nTypes:\n\nproblem: Problem\nname: String \nT0: Vector{Float64}\nT: Float64 \n\n\n\n\n\n","category":"method"},{"location":"Functions/#LowLevelFEM.initialTemperature-Tuple{Any, Any}","page":"Functions","title":"LowLevelFEM.initialTemperature","text":"FEM.initialTemperature(problem, name; T=...)\n\nSets the temperature value T at nodes belonging to physical group name. Returns the T0 initial nodal temperature vector.\n\nReturn: T0\n\nTypes:\n\nproblem: Problem\nname: String \nT: Float64 \nT0: Vector{Float64}\n\n\n\n\n\n","category":"method"},{"location":"Functions/#LowLevelFEM.initialVelocity!-Tuple{Any, Any, Any}","page":"Functions","title":"LowLevelFEM.initialVelocity!","text":"FEM.initialVelocity!(problem, name, v0; vx=..., vy=..., vz=...)\n\nChanges the velocity values vx, vy and vz (depending on the dimension of the problem) at nodes belonging to physical group name. Original values are in velocity vector v0.\n\nReturn: none\n\nTypes:\n\nproblem: Problem\nname: String \nv0: Vector{Float64}\nvx: Float64 \nvy: Float64 \nvz: Float64 \n\n\n\n\n\n","category":"method"},{"location":"Functions/#LowLevelFEM.initialVelocity-Tuple{Any, Any}","page":"Functions","title":"LowLevelFEM.initialVelocity","text":"FEM.initialVelocity(problem, name; vx=..., vy=..., vz=...)\n\nSets the velocity values vx, vy and vz (depending on the dimension of the problem) at nodes belonging to physical group name. Returns the initial velocity vector v0.\n\nReturn: v0\n\nTypes:\n\nproblem: Problem\nname: String \nvx: Float64 \nvy: Float64 \nvz: Float64 \nv0: Vector{Float64}\n\n\n\n\n\n","category":"method"},{"location":"Functions/#LowLevelFEM.largestEigenValue-Tuple{Any, Any}","page":"Functions","title":"LowLevelFEM.largestEigenValue","text":"FEM.largestEigenValue(K, M)\n\nSolves the smallest eigenvalue for a transient problem given by stiffness (heat conduction) matrix K and the mass (heat capacity) matrix M (C).\n\nReturn: λₘᵢₙ\n\nTypes:\n\nK: SparseMatrix\nM: SparseMatrix\nλₘᵢₙ: Float64 \n\n\n\n\n\n","category":"method"},{"location":"Functions/#LowLevelFEM.largestPeriodTime-Tuple{Any, Any}","page":"Functions","title":"LowLevelFEM.largestPeriodTime","text":"FEM.largestPeriodTime(K, M)\n\nSolves the largest period of time for a dynamic problem given by stiffness matrix K and the mass matrix M.\n\nReturn: Δt\n\nTypes:\n\nK: SparseMatrix\nM: SparseMatrix\nΔt: Float64 \n\n\n\n\n\n","category":"method"},{"location":"Functions/#LowLevelFEM.latentHeatMatrix-NTuple{4, Any}","page":"Functions","title":"LowLevelFEM.latentHeatMatrix","text":"FEM.latentHeatMatrix(problem, u, v, T0)\n\nSolves the latent heat matrix of the problem. With this matrix the generated heat due to deformations (given with displacement field u and velocity field v) can be solved. T0 is the current temperature field which is given in absolute temperature scale (Kelvin).\n\nReturn: latHeatMat\n\nTypes:\n\nproblem: Problem\nu: Vector{Float64}\nv: Vector{Float64}\nT0: Vector{Float64}\nlatHeatMat: SparseMatrix\n\n\n\n\n\n","category":"method"},{"location":"Functions/#LowLevelFEM.load-Tuple{Any}","page":"Functions","title":"LowLevelFEM.load","text":"FEM.load(name; fx=..., fy=..., fz=...)\n\nGives the intensity of distributed load on name physical group. At least one fx,  fy or fz value have to be given (depending on the dimension of the problem). fx,  fy or fz can be a constant value, or a function of x, y and z. (E.g. fn(x,y,z)=5*(5-x)); FEM.load(\"load1\", fx=fn))\n\nReturn: Tuple{String, Float64 or Function, Float64 or Function, Float64 or Function}\n\nTypes:\n\nname: String\nfx: Float64 or Function\nfy: Float64 or Function\nfz: Float64 or Function\n\n\n\n\n\n","category":"method"},{"location":"Functions/#LowLevelFEM.loadVector-Tuple{Any, Any}","page":"Functions","title":"LowLevelFEM.loadVector","text":"FEM.loadVector(problem, loads)\n\nSolves a load vector of problem. loads is a tuple of name of physical group  name, coordinates fx, fy and fz of the intensity of distributed force. It can solve traction or body force depending on the problem.\n\nIn case of 2D problems and Point physical group means concentrated force.\nIn case of 2D problems and Line physical group means surface force.\nIn case of 2D problems and Surface physical group means body force.\nIn case of 3D problems and Point physical group means concentrated force.\nIn case of 3D problems and Line physical group means edge force.\nIn case of 3D problems and Surface physical group means surface force.\nIn case of 3D problems and Volume physical group means body force.\n\nReturn: loadVec\n\nTypes:\n\nproblem: Problem\nloads: Vector{Tuple{String, Float64, Float64, Float64}}\nloadVec: Vector\n\n\n\n\n\n","category":"method"},{"location":"Functions/#LowLevelFEM.massMatrix-Tuple{Any}","page":"Functions","title":"LowLevelFEM.massMatrix","text":"FEM.massMatrix(problem; lumped=...)\n\nSolves the mass matrix of the problem. If lumped is true, solves lumped mass matrix.\n\nReturn: massMat\n\nTypes:\n\nproblem: Problem\nlumped: Boolean\nmassMat: SparseMatrix\n\n\n\n\n\n","category":"method"},{"location":"Functions/#LowLevelFEM.material-Tuple{Any}","page":"Functions","title":"LowLevelFEM.material","text":"FEM.material(name; E=2.0e5, ν=0.3, ρ=7.85e-9, k=45, c=4.2e8, α=1.2e-5)\n\nReturns a structure in which name is the name of a physical group,  E is the modulus of elasticity, ν Poisson's ratio and ρ is the mass density, k is the heat conductivity, c is the specific heat, α is the coefficient of heat expansion.\n\nReturn: mat\n\nTypes:\n\nmat: Material\nname: String\nE: Float64\nν: Float64\nρ: Float64\nk: Float64\nc: Float64\nα: Float64\n\n\n\n\n\n","category":"method"},{"location":"Functions/#LowLevelFEM.nodalAcceleration!-Tuple{Any, Any, Any}","page":"Functions","title":"LowLevelFEM.nodalAcceleration!","text":"FEM.nodalAcceleration!(problem, name, a0; ax=..., ay=..., az=...)\n\nChanges the acceleration values ax, ay and az (depending on the dimension of the problem) at nodes belonging to physical group name. Original values are in acceleration vector a0.\n\nReturn: none\n\nTypes:\n\nproblem: Problem\nname: String \na0: Vector{Float64}\nax: Float64\nay: Float64\naz: Float64\n\n\n\n\n\n","category":"method"},{"location":"Functions/#LowLevelFEM.nodalForce!-Tuple{Any, Any, Any}","page":"Functions","title":"LowLevelFEM.nodalForce!","text":"FEM.nodalForce!(problem, name, f0; fx=..., fy=..., fz=...)\n\nChanges the force values fx, fy and fz (depending on the dimension of the problem) at nodes belonging to physical group name. Original values are in load vector f0.\n\nReturn: none\n\nTypes:\n\nproblem: Problem\nname: String \nf0: Vector{Float64}\nfx: Float64 \nfy: Float64 \nfz: Float64 \n\n\n\n\n\n","category":"method"},{"location":"Functions/#LowLevelFEM.nonLinearStiffnessMatrix-Tuple{Any, Any}","page":"Functions","title":"LowLevelFEM.nonLinearStiffnessMatrix","text":"FEM.nonLinearStiffnessMatrix(problem, q)\n\nSolves the nonlinear stiffness matrix of the problem. q is a displacement field.\n\nReturn: stiffMat\n\nTypes:\n\nproblem: Problem\nq: Vector{Float64}\nstiffMat: SparseMatrix\n\n\n\n\n\n","category":"method"},{"location":"Functions/#LowLevelFEM.plotOnPath-Tuple{Any, Any, Any}","page":"Functions","title":"LowLevelFEM.plotOnPath","text":"FEM.plotOnPath(problem, pathName, field; points=100, step=..., plot=..., name=..., visible=...)\n\nLoad a 2D plot on a path into a View in gmsh. field is the number of View in gmsh from which the data of a field is imported. pathName is the name of a physical group which contains a curve. The curve is devided into equal length intervals with number of points points. The field is shown at this points. step is the sequence number of displayed step. If no step is given, shows all  the aviable steps as an animation. If plot is true, additional return parameter, a tuple of vectors is given back, in which x is a vector of values in horizontal axis, y is a vector of values in vertical axis of a plot (see Plots package). name is the title of graph and visible is a true or false value to toggle on or off the initial visibility  in gmsh. This function returns the tag of View.\n\nReturn: tag\n\nor\n\nReturn: tag, xy\n\nTypes:\n\nproblem: Problem\npathName: String\nfield: Integer\npoints: Integer\nstep: Integer\nplot: Boolean\nname: String\nvisible: Boolean\ntag: Integer\nxy: Tuples{Vector{Float64},Vector{Float64}}\n\n\n\n\n\n","category":"method"},{"location":"Functions/#LowLevelFEM.resultant-Tuple{Any, Any, Any}","page":"Functions","title":"LowLevelFEM.resultant","text":"FEM.resultant(problem, field, phName; grad=false, component=:x)\n\nSolves the resultant of field on phName physical group. Return the resultant(s) in tuple. Number of the members in tuple depends on the dimension of problem. It can solve the resultant of a load vector (sum of the elements of the vector), if field is a vector of floats. If field is a view (tag of a view in gmsh), then the integral of the field is solved. field must have only one component. If grad is true, then the gradient of the field will be evaluated and component of the gradient (:x, :y or :z) will be used to solve the resultant.\n\nReturn: res`\n\nor\n\nReturn: resx, resy\n\nor\n\nReturn: resx, resy, resz\n\nTypes:\n\nfield: Vector{Float64}\nphName: String \ndim: Int64\nres: Float64 \nresx: Float64 \nresy: Float64 \nresz: Float64 \n\n\n\n\n\n","category":"method"},{"location":"Functions/#LowLevelFEM.rotateNodes-Tuple{Any, Any, Any}","page":"Functions","title":"LowLevelFEM.rotateNodes","text":"FEM.rotateNodes(problem, phName, CoordSys)\n\nCreates the T transformation matrix, which rotates the nodal coordinate system of the nodes in phName physical group to the coordinate systen defined by CoordSys. The mesh belongs to problem.\n\nReturn: T\n\nTypes:\n\nproblem: Problem\nphName: String\nCoordSys: CoordinateSystem\nT: SparseMatrix\n\n\n\n\n\n","category":"method"},{"location":"Functions/#LowLevelFEM.showBucklingResults-Tuple{Any, LowLevelFEM.Eigen}","page":"Functions","title":"LowLevelFEM.showBucklingResults","text":"FEM.showBucklingResults(problem, Φ, name=..., visible=...)\n\nLoads buckling results into a View in gmsh. Φ is a struct of Eigen. name is a title to display and visible is a true or false value to toggle on or off the  initial visibility in gmsh. Click on ▷| to change the results. This function  returns the tag of View.\n\nReturn: tag\n\nTypes:\n\nproblem: Problem\nΦ: Eigen\nname: String\nvisible: Boolean\ntag: Integer\n\n\n\n\n\n","category":"method"},{"location":"Functions/#LowLevelFEM.showDoFResults-Tuple{Any, Any, Any}","page":"Functions","title":"LowLevelFEM.showDoFResults","text":"FEM.showDoFResults(problem, q, comp; t=..., name=..., visible=...)\n\nLoads nodal results into a View in gmsh. q is the field to show, comp is the component of the field (:uvec, :ux, :uy, :uz, :vvec, :vx, :vy, :vz, :qvec, :qx, :qy, :qz, :T, :p, \"qn\", :s, :sx, :sy, :sz, :sxy, :syx, :syz, :szy, :szx, :sxz, :e, :ex, :ey, :ez, :exy, :eyx, :eyz, :ezy, :ezx, :exz, :seqv), t is a vector of time steps (same number of columns as q), name is a title to display and visible is a true or false value to toggle on or off the  initial visibility in gmsh. If q has more columns, then a sequence of results will be shown (eg. as an animation). This function returns the tag of View.\n\nReturn: tag\n\nTypes:\n\nproblem: Problem\nq: Vector{Matrix}\ncomp: String\nt: Vector{Float64}\nname: String\nvisible: Boolean\ntag: Integer\n\n\n\n\n\n","category":"method"},{"location":"Functions/#LowLevelFEM.showElementResults-Tuple{Any, Any, Any}","page":"Functions","title":"LowLevelFEM.showElementResults","text":"FEM.showElementResults(problem, F, comp; t=..., name=..., visible=..., smooth=...)\n\nSame as ShowStressResults or showStrainResults, depending on the type of F data field.\n\nReturn: tag\n\nTypes:\n\nproblem: Problem\nF: TensorField\ncomp: String\nt: Vector{Float64}\nname: String\nvisible: Boolean\nsmooth: Boolean\ntag: Integer\n\n\n\n\n\n","category":"method"},{"location":"Functions/#LowLevelFEM.showHeatFluxResults-Tuple{Any, Any, Any}","page":"Functions","title":"LowLevelFEM.showHeatFluxResults","text":"FEM.showHeatFluxResults(problem, Q, comp; t=..., name=..., visible=..., smooth=...)\n\nLoads heat flux results into a View in gmsh. Q is a heat flux field to show, comp is the component of the field (:qvec, :qx, :qy, :qz, :q), t is a vector of time steps (same length as the number of stress states), name is a title to display, visible is a true or false value to toggle on or off the initial visibility in gmsh and smooth is a true of false value to toggle smoothing the stress field on or off. If length of t is more than one, then a  sequence of results will be shown (eg. as an animation). This function returns the tag of View.\n\nReturn: tag\n\nTypes:\n\nproblem: Problem\nS: TensorField\ncomp: String\nt: Vector{Float64}\nname: String\nvisible: Boolean\nsmooth: Boolean\ntag: Integer\n\n\n\n\n\n","category":"method"},{"location":"Functions/#LowLevelFEM.showModalResults-Tuple{Any, LowLevelFEM.Eigen}","page":"Functions","title":"LowLevelFEM.showModalResults","text":"FEM.showModalResults(problem, Φ, name=..., visible=...)\n\nLoads modal results into a View in gmsh. Φ is a struct of Eigen. name is a title to display and visible is a true or false value to toggle on or off the  initial visibility in gmsh. Click on ▷| to change the results. This function  returns the tag of View.\n\nReturn: tag\n\nTypes:\n\nproblem: Problem\nΦ: Eigen\nname: String\nvisible: Boolean\ntag: Integer\n\n\n\n\n\n","category":"method"},{"location":"Functions/#LowLevelFEM.showStrainResults-Tuple{Any, Any, Any}","page":"Functions","title":"LowLevelFEM.showStrainResults","text":"FEM.showStrainResults(problem, E, comp; t=..., name=..., visible=..., smooth=...)\n\nLoads strain results into a View in gmsh. E is a strain field to show, comp is the component of the field (:e, :ex, :ey, :ez, :exy, :eyz, :ezx), t is a vector of time steps (same length as the number of stress states), name is a title to display, visible is a true or false value to toggle on or off the initial visibility in gmsh and smooth is a true of false value to toggle smoothing the stress field on or off. If length of t is more than one, then a  sequence of results will be shown (eg. as an animation). This function returns the tag of View.\n\nReturn: tag\n\nTypes:\n\nproblem: Problem\nE: TensorField\ncomp: String\nt: Vector{Float64}\nname: String\nvisible: Boolean\nsmooth: Boolean\ntag: Integer\n\n\n\n\n\n","category":"method"},{"location":"Functions/#LowLevelFEM.showStressResults-Tuple{Any, Any, Any}","page":"Functions","title":"LowLevelFEM.showStressResults","text":"FEM.showStressResults(problem, S, comp; t=..., name=..., visible=..., smooth=...)\n\nLoads stress results into a View in gmsh. S is a stress field to show, comp is the component of the field (:s, :sx, :sy, :sz, :sxy, :syz, :szx, :seqv), t is a vector of time steps (same length as the number of stress states), name is a title to display, visible is a true or false value to toggle on or off the initial visibility in gmsh and smooth is a true of false value to toggle smoothing the stress field on or off. If length of t is more than one, then a  sequence of results will be shown (eg. as an animation). This function returns the tag of View.\n\nReturn: tag\n\nTypes:\n\nproblem: Problem\nS: TensorField\ncomp: String\nt: Vector{Float64}\nname: String\nvisible: Boolean\nsmooth: Boolean\ntag: Integer\n\n\n\n\n\n","category":"method"},{"location":"Functions/#LowLevelFEM.smallestEigenValue-Tuple{Any, Any}","page":"Functions","title":"LowLevelFEM.smallestEigenValue","text":"FEM.smallestEigenValue(K, M)\n\nSolves the largest eigenvalue for a transient problem given by stiffness (heat conduction) matrix K and the mass (heat capacity) matrix M (C).\n\nReturn: λₘₐₓ\n\nTypes:\n\nK: SparseMatrix\nM: SparseMatrix\nλₘₐₓ: Float64 \n\n\n\n\n\n","category":"method"},{"location":"Functions/#LowLevelFEM.smallestPeriodTime-Tuple{Any, Any}","page":"Functions","title":"LowLevelFEM.smallestPeriodTime","text":"FEM.smallestPeriodTime(K, M)\n\nSolves the smallest period of time for a dynamic problem given by stiffness matrix K and the mass matrix M.\n\nReturn: Δt\n\nTypes:\n\nK: SparseMatrix\nM: SparseMatrix\nΔt: Float64 \n\n\n\n\n\n","category":"method"},{"location":"Functions/#LowLevelFEM.solveBuckling-Tuple{Any, Any, Any}","page":"Functions","title":"LowLevelFEM.solveBuckling","text":"FEM.solveBuckling(problem, loads, constraints; n=6)\n\nSolves the multipliers for the first n critical forces and the corresponding  buckling shapes for the instability of the problem, when loads and  constraints are applied. Result can be presented by showBucklingResults function. loads and constraints can be defined by load and displacementConstraint functions, respectively.\n\nReturn: buckling\n\nTypes:\n\nproblem: Problem\nloads: Vector{tuples}\nconstraints: Vector{tuples}\nn: Int64\nbuckling: Eigen \n\n\n\n\n\n","category":"method"},{"location":"Functions/#LowLevelFEM.solveBucklingModes-Tuple{Any, Any}","page":"Functions","title":"LowLevelFEM.solveBucklingModes","text":"FEM.solveBucklingModes(K, Knl; n=6)\n\nSolves the critical force multipliers and buckling mode shapes of a problem given by stiffness matrix K and the nonlinear stiffness matrix Knl. n is the number of buckling modes to solve. Returns the struct of critical forces and buckling modes. Results can be presented by showBucklingResults function.\n\nReturn: modes\n\nTypes:\n\nK: SparseMatrix\nKnl: SparseMatrix\nn: Int64\nmodes: Eigen \n\n\n\n\n\n","category":"method"},{"location":"Functions/#LowLevelFEM.solveDisplacement-Tuple{Any, Any, Any}","page":"Functions","title":"LowLevelFEM.solveDisplacement","text":"FEM.solveDisplacement(problem, load, supp)\n\nSolves the displacement vector q of problem with loads load and supports supp.\n\nReturn: q\n\nTypes:\n\nproblem: Problem \nload: Vector{Tuple} \nsupp: Vector{Tuple}\nq: Vector{Float64}\n\n\n\n\n\n","category":"method"},{"location":"Functions/#LowLevelFEM.solveDisplacement-Tuple{Any, Any}","page":"Functions","title":"LowLevelFEM.solveDisplacement","text":"FEM.solveDisplacement(K, q)\n\nSolves the equation K*q=f for the displacement vector q. K is the stiffness Matrix, q is the load vector.\n\nReturn: q\n\nTypes:\n\nK: SparseMatrix \nf: Vector{Float64} \nq: Vector{Float64}\n\n\n\n\n\n","category":"method"},{"location":"Functions/#LowLevelFEM.solveEigenModes-Tuple{Any, Any}","page":"Functions","title":"LowLevelFEM.solveEigenModes","text":"FEM.solveEigenModes(K, M; n=6, fₘᵢₙ=1.01)\n\nSolves the eigen frequencies and mode shapes of a problem given by stiffness matrix K and the mass matrix M. n is the number of eigenfrequencies to solve, and solves the eigenfrequencies greater than fₘᵢₙ. Returns the struct of eigenfrequencies and eigen modes. Results can be presented by showModalResults function.\n\nReturn: modes\n\nTypes:\n\nK: SparseMatrix\nM: SparseMatrix\nn: Int64\nfₘᵢₙ: Float64\nmodes: Eigen \n\n\n\n\n\n","category":"method"},{"location":"Functions/#LowLevelFEM.solveHeatFlux-Tuple{Any, Any}","page":"Functions","title":"LowLevelFEM.solveHeatFlux","text":"FEM.solveHeatFlux(problem, T; DoFResults=false)\n\nSolves the heat flux field q from temperature vector T. heat flux is given per elements, so it usually contains jumps at the boundary of elements. Details of mesh is available in problem. If DoFResults is true, q is a matrix with nodal results. In this case showDoFResults can be used to show the results (otherwise showHeatFluxResults or showElementResults).\n\nReturn: q\n\nTypes:\n\nproblem: Problem\nT: Vector{Float64}\nq: VectorField or Matrix{Float}\n\n\n\n\n\n","category":"method"},{"location":"Functions/#LowLevelFEM.solveModalAnalysis-Tuple{Any}","page":"Functions","title":"LowLevelFEM.solveModalAnalysis","text":"FEM.solveModalAnalysis(problem; constraint=[]; loads=[], n=6)\n\nSolves the first n eigenfrequencies and the corresponding  mode shapes for the problem, when loads and  constraints are applied. loads and contraints are optional.  Result can be presented by showModalResults function.  loads and constraints can be defined by load and displacementConstraint functions, respectively. If loads are given, it solves the eigenfrequencies of a prestressed structure.\n\nReturn: modes\n\nTypes:\n\nproblem: Problem\nloads: Vector{tuples}\nconstraints: Vector{tuples}\nn: Int64\nmodes: Eigen \n\n\n\n\n\n","category":"method"},{"location":"Functions/#LowLevelFEM.solveStrain-Tuple{Any, Any}","page":"Functions","title":"LowLevelFEM.solveStrain","text":"FEM.solveStrain(problem, q; DoFResults=false)\n\nSolves the strain field E from displacement vector q. Strain field is given per elements, so it usually contains jumps at the boundaries of elements. Details of mesh is available in problem. If DoFResults is true, E is a matrix with nodal results. In this case showDoFResults can be used to show the results  (otherwise showStainResults or showElementResults).\n\nReturn: E\n\nTypes:\n\nproblem: Problem\nq: Vector{Float64}\nE: TensorField or Matrix{Float64}\n\n\n\n\n\n","category":"method"},{"location":"Functions/#LowLevelFEM.solveStress-Tuple{Any, Any}","page":"Functions","title":"LowLevelFEM.solveStress","text":"FEM.solveStress(problem, q; T=..., T₀=..., DoFResults=false)\n\nSolves the stress field S from displacement vector q. Stress field is given per elements, so it usually contains jumps at the boundary of elements. Details of mesh is available in problem. If DoFResults is true, S is a matrix with nodal results. In this case showDoFResults can be used to show the results  (otherwise showStressResults or showElementResults). If the T temperature field (and T₀ initial temperature field if it differs from zero) is given, the function solves also the thermal stresses.\n\nReturn: S\n\nTypes:\n\nproblem: Problem\nq: Vector{Float64}\nT: Vector{Float64}\nT₀: Vector{Float64}\nS: TensorField or Matrix{Float64}\n\n\n\n\n\n","category":"method"},{"location":"Functions/#LowLevelFEM.solveTemperature-NTuple{4, Any}","page":"Functions","title":"LowLevelFEM.solveTemperature","text":"FEM.solveTemperature(problem, flux, temp, heatconv)\n\nSolves the temperature vector T of problem with given heat flux flux, temperature temp and heat convection heatconv.\n\nReturn: T\n\nTypes:\n\nproblem: Problem \nflux: Vector{Tuple} \ntemp: Vector{Tuple}\nheatconv: Vector{Tuple}\nT: Vector{Float64}\n\n\n\n\n\n","category":"method"},{"location":"Functions/#LowLevelFEM.solveTemperature-Tuple{Any, Any, Any}","page":"Functions","title":"LowLevelFEM.solveTemperature","text":"FEM.solveTemperature(problem, flux, temp)\n\nSolves the temperature vector T of problem with given heat flux flux and temperature temp.\n\nReturn: T\n\nTypes:\n\nproblem: Problem \nflux: Vector{Tuple} \ntemp: Vector{Tuple}\nT: Vector{Float64}\n\n\n\n\n\n","category":"method"},{"location":"Functions/#LowLevelFEM.solveTemperature-Tuple{Any, Any}","page":"Functions","title":"LowLevelFEM.solveTemperature","text":"FEM.solveTemperature(K, q)\n\nSolves the equation K*T=q for the temperature vector T. K is the heat conduction matrix, q is the heat flux vector.\n\nReturn: T\n\nTypes:\n\nK: SparseMatrix \nq: Vector{Float64} \nT: Vector{Float64}\n\n\n\n\n\n","category":"method"},{"location":"Functions/#LowLevelFEM.stiffnessMatrix-Tuple{Any}","page":"Functions","title":"LowLevelFEM.stiffnessMatrix","text":"FEM.stiffnessMatrix(problem)\n\nSolves the stiffness matrix of the problem.\n\nReturn: stiffMat\n\nTypes:\n\nproblem: Problem\nstiffMat: SparseMatrix\n\n\n\n\n\n","category":"method"},{"location":"Functions/#LowLevelFEM.temperatureConstraint-Tuple{Any}","page":"Functions","title":"LowLevelFEM.temperatureConstraint","text":"FEM.temperatureConstraint(name; T=...)\n\nGives the temperature constraints on name physical group.  T can be a constant value, or a function of x, y and z. (E.g. fn(x,y,z)=5*(5-x)); FEM.temperatureConstraint(\"surf1\", T=fn))\n\nReturn: Tuple{String, Float64 or Function, Float64 or Function, Float64 or Function}\n\nTypes:\n\nname: String\nT: Float64 or Function\n\n\n\n\n\n","category":"method"},{"location":"Functions/#LowLevelFEM.thermalLoadVector-Tuple{Any, Any}","page":"Functions","title":"LowLevelFEM.thermalLoadVector","text":"FEM.thermalLoadVector(problem, T; T₀=...)\n\nSolves the thermal load vector from a temperature field T for problem problem. T₀ is the initial temperature field.\n\nReturn: thermLoadVec\n\nTypes:\n\nproblem: Problem\nT: Vector{Float64}\nT₀: Vector{Float64}\nthermLoadVec: Vector{Float64}\n\n\n\n\n\n","category":"method"},{"location":"Functions/#Index","page":"Functions","title":"Index","text":"","category":"section"},{"location":"Functions/","page":"Functions","title":"Functions","text":"","category":"page"},{"location":"#LowLevelFEM","page":"Introduction","title":"LowLevelFEM","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Solution of a problem in linear elasticity using Finite Element Method consists of solution of the stiffness matrix K and load vector f, modifying them according to the boundary conditions (getting K' and f'), solving the displacement field q' as the result of the system of equations K'q=f', solving the stress field from q and visualize them. The above described steps can be easily performed using the LowLevelFEM package. Each step means a function with the appropriate parameters, while at any step it is possible to perform an arbitrary operation with the quantities calculated in the meantime. For example the strain energy can be solved as U=1/2q^T^Kq, for which the code is simply U=q'*K*q/2.(see Examples)","category":"page"},{"location":"#Features","page":"Introduction","title":"Features","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Sketching the geometry, making the FE mesh with GMSH.\nSolving problems from linear elasticity,\n2D problems,\nPlane stress,\nPlane strain,\nAxisymmetric,\n3D problem (solid body),\nwhich means the creation of the stiffness matrix K and the mass matrix M of the problem using arbitrary\nelement types (line, triangle, rectangle, tetrahedron, hexahedron, pyramid, wedge)\napproximation order (up to ten, Lagrange polynomials)\nApplying\ndistributed forces on arbitrary physical groups (see GMSH),\nLines (in 2D: surface force, in 3D: edge force),\nSurfaces (in 2D: body force, in 3D: traction),\nVolumes (in 3D: body force),\nconcentrated forces on nodes,\nwhich means the calculation of the load vector f.\nConstraints on physical groups (nodes on points, edges, surfaces and volumes).\nElastic support\nGiving loads as functions\nGiving displacement constraints as functions\nDifferent materials on each physical group\nSolves stress, stain and heat flux field as element result (possibly jumps at the element boundaries) or as nodal results.\nResultant of scalar or vector type quantities on arbitrary physical group (in GMSH). The resultant can be the sum of elements in a load vector, or an integral of a distributed quantity.\nApplying initial conditions (displacement and velocity) on arbitrary points, edges, surfaces, volumes and on combinations of them.\nSolution of static and dynamic (transient with central difference method, Newmark and HHT-α) problems,\nDisplaying the results (scalar or vector displacements, scalar or tensor stresses and strains) with GMSH.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"- When dynamic problems are solved animations are also possible (click on $\\triangleright$).","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Rotation of nodal coordinate systems using transformation matrix. Transformation matrix can be given with constant direction vectors or with functions. (With this arbitrary coordinate systems can be defined.)","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Plotting arbitrary results on paths.\nSolves the damping matrix of structures in case of proportional damping\nusing Rayleigh-damping (C=αM+βK) or\nusing Caughey-damping (C=αM+β₁K+β₂KM⁻¹K+β₃KM⁻¹KM⁻¹K+⋅⋅⋅).\nSolves the stability analysis transient problems (spectral radius, period error, physical damping ratio, algorithmic damping ratio)\nBuckling of structures in 3D.\nHeat conduction problems\nConductivity and heat capacity matrices,\nTemperature boundary conditions (also with functions)\nLoads:\nHeat flux on boundaries (also with functions)\nHeat source inside the bodies (also with functions)\nHeat convection\nStady state and transient problems in heat conduction.\nHeat expansion\nThermal loading in stress analysis (thermal stresses)\nGenerated heat (and temperature change) due to elastic deformations.\nModal analysis (eigenfrequencies, modal shapes), even if the structure is prestressed.","category":"page"},{"location":"#Planned-features","page":"Introduction","title":"Planned features","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"[ ] 3D (and  2D) truss structures\n[ ] 3D (and 2D) beam structures\n[ ] Shells\n[ ] MultiPoint Constraint (like MPC184 in Ansys)\n[ ] Contact problems,\n[ ] in 2D,\n[ ] in 3D,\n[ ] with penalty method\n[ ] with Lagrange multiplier method.\n[ ] Defining displacement initial condition as a function of x, y and z.\n[ ] Defining velocity initial condition as a function of x, y and z.\n[ ] Finite rotations.\n[ ] Plastic deformation (within small strain theory).\n[ ] Solver for arbitrary weak forms.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Any suggestions are welcome.","category":"page"}]
}
